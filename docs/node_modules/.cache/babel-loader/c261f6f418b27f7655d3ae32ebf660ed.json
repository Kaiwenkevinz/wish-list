{"ast":null,"code":"import axios from \"axios\";\nimport { returnErrors } from \"./messages\";\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from \"./types\";\naxios.defaults.baseURL = 'https://wishlist-backend-server.herokuapp.com'; // axios.defaults.baseURL = 'http://127.0.0.1:8000';\n// export const fetchCategoriesIfNeeded = () => {\n//   return (dispatch, getState) => {\n//      // Do stuff\n//   }\n// }\n// CHECK TOKEN & LOAD USER\n\nexport const loadUser = () => (dispatch, getState) => {\n  // User Loading\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get(\"/api/auth/user\", tokenConfig(getState)).then(res => {\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; // LOGIN USER\n\nexport const login = (username, password) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // Request Body\n\n  const body = JSON.stringify({\n    username,\n    password\n  });\n  axios.post(\"/api/auth/login\", body, config).then(res => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n}; // REGISTER USER\n\nexport const register = ({\n  username,\n  password,\n  email\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // Request Body\n\n  const body = JSON.stringify({\n    username,\n    email,\n    password\n  });\n  axios.post(\"/api/auth/register\", body, config).then(res => {\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n}; // LOGOUT USER\n\nexport const logout = () => (dispatch, getState) => {\n  axios.post(\"/api/auth/logout/\", null, tokenConfig(getState)).then(res => {\n    dispatch({\n      type: 'CLEAR_LEADS'\n    });\n    dispatch({\n      type: LOGOUT_SUCCESS\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n  });\n}; // Setup config with token - helper function\n\nexport const tokenConfig = getState => {\n  // Get token from state\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // If token, add to headers config\n\n  if (token) {\n    config.headers[\"Authorization\"] = \"Token \".concat(token);\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/mnt/d/Personal Project/wish-list/frontend/src/actions/auth.js"],"names":["axios","returnErrors","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","defaults","baseURL","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","login","username","password","config","headers","body","JSON","stringify","post","register","email","logout","token","auth"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { returnErrors } from \"./messages\";\n\nimport {\n  USER_LOADED,\n  USER_LOADING,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT_SUCCESS,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL\n} from \"./types\";\n\naxios.defaults.baseURL = 'https://wishlist-backend-server.herokuapp.com';\n// axios.defaults.baseURL = 'http://127.0.0.1:8000';\n\n// export const fetchCategoriesIfNeeded = () => {\n//   return (dispatch, getState) => {\n//      // Do stuff\n//   }\n// }\n\n// CHECK TOKEN & LOAD USER\nexport const loadUser = () => (dispatch, getState) => {\n  // User Loading\n  dispatch({ type: USER_LOADING });\n\n  axios\n    .get(`/api/auth/user`, tokenConfig(getState))\n    .then(res => {\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      });\n    })\n    .catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: AUTH_ERROR\n      });\n    });\n};\n\n// LOGIN USER\nexport const login = (username, password) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  // Request Body\n  const body = JSON.stringify({ username, password });\n\n  axios\n    .post(\"/api/auth/login\", body, config)\n    .then(res => {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n    })\n    .catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: LOGIN_FAIL\n      });\n    });\n};\n\n// REGISTER USER\nexport const register = ({ username, password, email }) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  // Request Body\n  const body = JSON.stringify({ username, email, password });\n\n  axios\n    .post(\"/api/auth/register\", body, config)\n    .then(res => {\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n    })\n    .catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    });\n};\n\n// LOGOUT USER\nexport const logout = () => (dispatch, getState) => {\n  axios\n    .post(\"/api/auth/logout/\", null, tokenConfig(getState))\n    .then(res => {\n      dispatch({ type: 'CLEAR_LEADS' });\n      dispatch({\n        type: LOGOUT_SUCCESS\n      });\n    })\n    .catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n    });\n};\n\n// Setup config with token - helper function\nexport const tokenConfig = getState => {\n  // Get token from state\n  const token = getState().auth.token;\n\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  // If token, add to headers config\n  if (token) {\n    config.headers[\"Authorization\"] = `Token ${token}`;\n  }\n\n  return config;\n};"]},"metadata":{},"sourceType":"module"}